diff --git a/source/pprint.c b/source/pprint.c
index 7506c3f..ad432b2 100644
--- a/source/pprint.c
+++ b/source/pprint.c
@@ -438,6 +438,33 @@ void pprint_guard(struct cloogoptions *options, FILE *dst, int indent,
 	fprintf(dst,"}\n"); 
 }
 
+char *pprint_replacestr(char *string, char *sub, char *replace)
+{
+    if (!string || !sub || !replace) return NULL;
+    char *pos = string; int found = 0;
+    while ((pos = strstr(pos, sub))) {
+        pos += strlen(sub);
+        found++;
+    }
+    if (found == 0) return NULL;
+    int size = ((strlen(string) - (strlen(sub) * found)) + (strlen(replace) * found)) + 1;
+    char *result = (char*)malloc(size);
+    result[0] = 0;
+    pos = string;
+    char *pos1;
+    while ((pos1 = strstr(pos, sub))) {
+        int len = (pos1 - pos);
+        strncat(result, pos, len);
+        strncat(result, replace, strlen(replace));
+        pos = (pos1 + strlen(sub));
+    }
+    if (pos != (string + strlen(string))) {
+        strncat(result, pos, (string + strlen(string) - pos));
+    }
+    return result;
+}
+
+
 void pprint_for(struct cloogoptions *options, FILE *dst, int indent,
 		 struct clast_for *f)
 {
@@ -480,6 +507,33 @@ void pprint_for(struct cloogoptions *options, FILE *dst, int indent,
                 pprint_expr(options, dst, f->UB);
                 fprintf(dst, ";\n");
             }
+            FILE *fp = fopen("__temp.s", "a+");
+            if (fp != NULL) {
+                pprint_stmt_list(options, fp, 0, f->body);
+
+                char *temp_str = (char *)malloc(1024);
+                temp_str[0] = 0;
+
+                rewind(fp);
+
+                fprintf(dst, "%*s", indent, "");
+                fprintf(dst, "##if (defined __DATA_DIST_DECLS || defined USE_LOCAL_ARRAYS)\n");
+
+                while (fgets(temp_str, 1024, fp)) {
+                    char *str = pprint_replacestr(temp_str, "S", "decl_S");
+                    if (str) {
+                        fprintf(dst, "%*s", indent, "");
+                        fprintf(dst, "%s", str);
+                    }
+                }
+
+                fprintf(dst, "%*s", indent, "");
+                fprintf(dst, "##endif\n");
+
+                fclose(fp);
+                remove("__temp.s");
+            }
+
             fprintf(dst, "%*s#pragma ivdep\n", indent, "");
             fprintf(dst, "%*s#pragma vector always\n", indent, "");
             fprintf(dst, "%*s", indent, "");

